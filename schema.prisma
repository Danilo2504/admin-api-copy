generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  email              String
  password           String?
  createdAt          DateTime             @default(now())
  deletedAt          DateTime?
  AuthSource         AuthSource
  Business           Business?
  BusinessCurrencies BusinessCurrencies[]
  BusinessMembers    BusinessMember[]
  Contacts           Contact[]
  Debt               Debt[]
  FinancialAccount   FinancialAccount?
  Transaction        Transaction[]
  Account            UserAccount?
}

model UserAccount {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  cellPhone   String
  country     String
  countryCode String
  image       String?
  address     String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  ownerId     String    @unique @db.Uuid
  language    String
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Business {
  id                 String               @id @default(uuid()) @db.Uuid
  type               BusinessType
  teamEnabled        Boolean
  multipleCurrencies Boolean
  createdAt          DateTime             @default(now())
  deletedAt          DateTime?
  ownerId            String               @unique @db.Uuid
  owner              User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  currencies         BusinessCurrencies[]
  teamMembers        BusinessMember[]
  financialAccounts  FinancialAccount[]
}

model Currency {
  id                String               @id @default(uuid()) @db.Uuid
  code              String
  symbol            String
  locale            String
  country           String
  image             String?
  isoCode           String?
  bussiness         BusinessCurrencies[]
  financialAccounts FinancialAccount[]
}

model BusinessCurrencies {
  businessId String   @db.Uuid
  currencyId String   @db.Uuid
  ownerId    String   @db.Uuid
  business   Business @relation(fields: [businessId], references: [id])
  currency   Currency @relation(fields: [currencyId], references: [id])
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@id([businessId, currencyId])
}

model BusinessMember {
  id         String    @id @default(uuid()) @db.Uuid
  role       UserRole
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  businessId String    @db.Uuid
  userId     String    @db.Uuid
  business   Business  @relation(fields: [businessId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  phone       String
  type        ContactType
  email       String
  note        String
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?
  ownerId     String        @db.Uuid
  owner       User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  debt        Debt[]
  transaction Transaction[]
}

model Transaction {
  id                 String              @id @default(uuid()) @db.Uuid
  status             TransactionStatus
  type               TransactionType
  total_amount       Float
  description        String
  date               String
  payment_method     PaymentMethod?
  createdAt          DateTime            @default(now())
  deletedAt          DateTime?
  categoryId         String              @db.Uuid
  contactId          String?             @db.Uuid
  debtId             String?             @db.Uuid
  financialAccountId String              @db.Uuid
  ownerId            String              @db.Uuid
  category           TransactionCategory @relation(fields: [categoryId], references: [id])
  contact            Contact?            @relation(fields: [contactId], references: [id])
  debt               Debt?               @relation(fields: [debtId], references: [id])
  financialAccount   FinancialAccount    @relation(fields: [financialAccountId], references: [id])
  owner              User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Debt {
  id                 String            @id @default(uuid()) @db.Uuid
  initial_date       DateTime?         @default(now())
  total_amount       Float
  type               TransactionType
  createdAt          DateTime          @default(now())
  deletedAt          DateTime?
  debtorId           String?           @db.Uuid
  financialAccountId String?           @db.Uuid
  ownerId            String            @db.Uuid
  contact            Contact?          @relation(fields: [debtorId], references: [id])
  financialAccount   FinancialAccount? @relation(fields: [financialAccountId], references: [id])
  owner              User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  transactions       Transaction[]
}

model TransactionCategory {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  code        String
  image       String
  type        TransactionType
  group       TransactionGroup
  transaction Transaction[]
}

model FinancialAccount {
  id           String        @id @default(uuid()) @db.Uuid
  accountName  String
  createdAt    DateTime      @default(now())
  deletedAt    DateTime?
  currencyId   String        @db.Uuid
  businessId   String        @db.Uuid
  ownerId      String        @unique @db.Uuid
  mainAccount  Boolean?
  debts        Debt[]
  business     Business      @relation(fields: [businessId], references: [id])
  currency     Currency      @relation(fields: [currencyId], references: [id])
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model AdminAccount {
  id        String    @id @default(uuid()) @db.Uuid
  email     String
  password  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  adminRole AdminRole
}

model CountryCode {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  isoCode String
  prefix  String
}

model Country {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  isoCode String
}

model Language {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  isoCode String
}

model AppVersion {
  id          String    @id @default(uuid()) @db.Uuid
  version     String
  releaseDate String
  description String
  available   Boolean
  status      AppStatus
  message     String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
}

model System {
  id        String    @id @default(uuid()) @db.Uuid
  available Boolean
  status    ApiStatus
  message   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Link {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  url       String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

enum TransactionStatus {
  DEBT
  APPROVED
  PAID
}

enum DebtStatus {
  OPEN
  CLOSED
}

enum ContactType {
  CLIENT
  PROVIDER
  EMPLOYEE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionGroup {
  TRANSACTION
  PAYMENT
}

enum BusinessType {
  PERSONAL
  COMPANY
}

enum UserRole {
  OWNER
  EMPLOYEE
  MANAGER
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  OTHER
  ONLINE
  NONE
}

enum AdminRole {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum AuthSource {
  GOOGLE
  FACEBOOK
  OTP
}

enum AppStatus {
  LIVE
  ERROR
  DEPRECATED
  NEEDS_UPDATE
}

enum ApiStatus {
  LIVE
  ERROR
  WORKING_IN_PROGRESS
}
